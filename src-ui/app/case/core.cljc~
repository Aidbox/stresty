(ns app.case.core
  (:require [re-frame.core :as rf]
            [app.routes :refer [href]]
            [stylo.core :refer [c]]
            [app.pages :as pages]
            [zframes.re-frame :as zrf]
            [anti.select :refer [zf-select]]
            [anti.button :refer [zf-button]]
            [anti.util :refer [block]]
            [reagent.core :as r]
            [reagent.dom :as dom]))

(def meths #{:GET :POST :PUT :DELETE :HEAD :PATCH :OPTION})

(defonce cms (r/atom {}))

(def stresty-case
  {:id :create-patient
   :desc "You should create patient to start use some Jedi force"
   :POST "/Patient"
   :body {:id "new-patient"
          :name [{:given ["Luke"]
                  :family "Skywalker"}]
          :birthDate "2145-08-12"
          :gender "male"}})

(zrf/defx ctx
  [{db :db} [_ phase params]]
  (cond
    (= :init phase)
    {:db (-> db
             (assoc-in [::db :schema :select :create-patient :options] (map name meths))
             (assoc-in [::db :steps :create-patient :schema] stresty-case))}
    ))

(zrf/defx run-case
  [{db :db} [_ case-id]]
                                        ; TODO: run case on server
  (prn db)
  {:db (-> db
           (assoc-in [::db :steps case-id :schema]
                     {:run true
                      :response {:status 200
                                 :body {:message "Access Denied"}}}))})

(zrf/defx change-value
  [{db :db} [_ path value]]
  {:db (-> db
           (assoc-in path value))}
  )

(zrf/defs step
  [db _]
  (get-in db [::db :steps :create-patient]))

(defn step-view [step]
  (let [method (->> step
                    keys
                    (filter meths)
                    first)
        url (get step method)
        body (:body step)]
    [:div [:span (:desc step)]
     [:div {:class (c :flex :flex-col [:bg :gray-200] [:p 1] [:space-y 2])}
      
      [:div {:class (c :flex :flex-row :justify-between [:space-x 2])}
       [:div {:class (c :flex-row :flex :items-center [:space-x 2])}
        [zf-select {:placeholder "Method"
                    :opts {:zf/root [::db]
                           :zf/path [:select :create-patient]}}]
        [:div url]]
       [zf-button {:type "primary"
                   :on-click [::run-case (:id step)]} "Run"]]
      (when (-> body
                nil?
                not)
        [:code {:class (c [:border 2] [:p 1])}
         (str body)
         ])]]    
    )
  )

(defn editor [step-sub read-only path]
  (let [data @(rf/subscribe [step-sub])
        value (get-in data path)]
    (r/create-class
     {:component-did-mount
      (fn [this]
        (let [el (dom/dom-node this)
              component-id (str "result-" (:id stresty-case))
              cm (js/CodeMirror.
                  el
                  #js {:lineNumbers true
                       :readOnly read-only
                       })]
          (swap! cms assoc component-id cm)
          (.on cm "change"
               (fn []
                 (rf/dispatch [::change-value path (.getValue cm)]))
               )
          )
        )
      :reagent-render
      (fn [stresty-case]
        [:div ]
        )
      }
     ))
  )

(defn view []
  [:div {:class (c [:p 6])}
   [step-view stresty-case]
   [editor ::step false [::db :steps :create-patient]]])

(pages/reg-page ctx view)
