# name: GitHub Actions Demo
# on: [push]
# jobs:
#   Explore-GitHub-Actions:
#     runs-on: ubuntu-latest
#     steps:
#       - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
#       - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
#       - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
#       - name: Check out repository code
#         uses: actions/checkout@v2
#       - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
#       - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
#       - name: List files in the repository
#         run: |
#           ls ${{ github.workspace }}
#       - run: echo "üçè This job's status is ${{ job.status }}."
name: stresty ci

on: [push]

jobs:
  clojure:
    strategy:
      matrix:
        # os: [ubuntu-latest, macOS-latest, windows-latest]
        os: [ubuntu-latest, macOS-latest]
        gu-binary: [gu, gu.cmd]
        exclude:
          - os: ubuntu-latest
            gu-binary: gu.cmd
          - os: macos-latest
            gu-binary: gu.cmd
          # - os: windows-latest
          #   gu-binary: gu

    runs-on: ${{ matrix.os }}

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install java
        uses: actions/setup-java@v2
        with:
          distribution: "adopt" # See 'Supported distributions' for available options
          java-version: "11"

      - name: install clj
        uses: DeLaGuardo/setup-clojure@3.2
        with:
          cli: 1.10.3.822

      - name: install rlwrap
        if: matrix.os == 'ubuntu-latest' 
        run: sudo apt-get install -y rlwrap

      - name: install rlwrap
        if: matrix.os == 'macos-latest' 
        run: brew install rlwrap

        #run: sudo apt-get install -y rlwrap
      - name: cache mvn
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('deps.edn')}}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: run tests on Unix based OS
        run: make test
        if: matrix.os != 'windows-latest' 

      # - name: run tests on Windows
      #   run: clojure -M:ui:test:nrepl:kaocha
      #   shell: powershell
      #   if: matrix.os == 'windows-latest' 

      - name: Setup Graalvm
        id: setup-graalvm
        uses: DeLaGuardo/setup-graalvm@master
        with:
          # GraalVM version, no pattern syntax available atm
          graalvm: "21.0.0.2"
          java: "java11"
          # Architecture flag, optional, defaults to 'amd64'. Available options are 'amd64' and 'aarch64'. Later is available only for linux runners.
          arch: "amd64"

      - name: Check java binary
        run: java -version

      - name: Install native-image component
        run: ${{ matrix.gu-binary }} install native-image
         
      - name: build native on Unix like OS
        run: make build-native || cat /tmp/clojure-*.edn
        if: matrix.os != 'windows-latest' 

      - name: build native on Windows
        run: cp VERSION resources/VERSION; clojure -M:native-image;
        if: matrix.os == 'windows-latest' 
        shell: powershell

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: sty 
          asset_name: sty-${{ matrix.config.os }}
          tag: latest 
          overwrite: true
