name: Stresty CI

on: [push]

jobs:
  clojure:
    strategy:
      matrix:
        # os: [ubuntu-latest, macOS-latest, windows-latest]
        os: [macOS-latest, ubuntu-latest]
        gu-binary: [gu, gu.cmd]
        exclude:
          - os: ubuntu-latest
            gu-binary: gu.cmd
          - os: macos-latest
            gu-binary: gu.cmd
          # - os: windows-latest
          #   gu-binary: gu

    runs-on: ${{ matrix.os }}

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install java
        uses: actions/setup-java@v2
        with:
          distribution: "adopt" # See 'Supported distributions' for available options
          java-version: "11"

      - name: install clj
        uses: DeLaGuardo/setup-clojure@3.2
        with:
          cli: 1.10.3.822

      - name: install rlwrap
        if: matrix.os == 'ubuntu-latest' 
        run: sudo apt-get install -y rlwrap

      - name: install rlwrap
        if: matrix.os == 'macos-latest' 
        run: brew install rlwrap

        #run: sudo apt-get install -y rlwrap
      - name: cache mvn
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('deps.edn')}}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: run tests on Unix based OS
        run: make test
        if: matrix.os != 'windows-latest' 

      # - name: run tests on Windows
      #   run: clojure -M:ui:test:nrepl:kaocha
      #   shell: powershell
      #   if: matrix.os == 'windows-latest' 

      - name: Setup Graalvm
        id: setup-graalvm
        uses: DeLaGuardo/setup-graalvm@master
        with:
          # GraalVM version, no pattern syntax available atm
          graalvm: "21.0.0.2"
          java: "java11"
          # Architecture flag, optional, defaults to 'amd64'. Available options are 'amd64' and 'aarch64'. Later is available only for linux runners.
          arch: "amd64"

      - name: Check java binary
        run: java -version

      - name: Install native-image component
        run: ${{ matrix.gu-binary }} install native-image
         
      - name: build native on Unix like OS
        run: make build-native || cat /tmp/clojure-*.edn
        if: matrix.os != 'windows-latest' 

      - name: build native on Windows
        run: cp VERSION resources/VERSION; clojure -M:native-image;
        if: matrix.os == 'windows-latest' 
        shell: powershell

      - name: Compress binary 
        run: zip sty.zip sty 

      #- name: Delete last release
      #  uses: ame-yu/action-delete-latest-release@v2
      #  with:
      #   github_token: ${{ secrets.GITHUB_TOKEN }}

      #- name: Create release and upload binaries
      #  uses: svenstaro/upload-release-action@v2
      #  with:
      #    repo_token: ${{ secrets.GITHUB_TOKEN }}
      #    file: sty.zip
      #    asset_name: sty-${{ matrix.os }}.zip
      #    tag: 0.0.1-RC1
      #    overwrite: true
      
      #- name: Create Release
      #  id: create_release
      #  uses: actions/create-release@v1
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #  with:
      #    tag_name: 0.0.1-RC1
      #    release_name: Release 0.0.1-RC1
      #    draft: false
      #    prerelease: false    
       
      #- name: Get Release File Name & Upload URL
      #  id: get_release_info
      #  run: |
      #    echo ::set-output name=file_name::${REPOSITORY_NAME##*/}-0.0.1-RC1 # RepositoryName-v1.0.0
      #    value=`cat release_url/release_url.txt`
      #    echo ::set-output name=upload_url::$value
      #  env:
      #    TAG_REF_NAME: ${{ github.ref }}
      #    REPOSITORY_NAME: ${{ github.repository }}
      #- name: Get release
      #  id: get_release
      #  uses: bruceadams/get-release@v1.2.2
      #  env:
      #    GITHUB_TOKEN: ${{ github.token }} 
      - name: Delete
        uses: ame-yu/action-delete-latest-release@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: type-your-release-name
          tag_name: 0.0.1-RC1
          
      - id: fetch-latest-release
        uses: thebritican/fetch-latest-release@v2.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}       
          
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.fetch-latest-release.outputs.upload_url }}
          asset_path: ./sty.zip
          asset_name: sty-${{ matrix.os }}.zip
          asset_content_type: application/zip
