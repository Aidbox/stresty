name: Stresty CI

on: [push]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        # os: [macOS-latest, ubuntu-latest]
        gu-binary: [gu, gu.cmd]
        exclude:
          - os: ubuntu-latest
            gu-binary: gu.cmd
          - os: macos-latest
            gu-binary: gu.cmd
          # - os: windows-latest
          #   gu-binary: gu

    runs-on: ${{ matrix.os }}

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install java
        uses: actions/setup-java@v2
        with:
          distribution: "adopt" # See 'Supported distributions' for available options
          java-version: "11"

      - name: install clj
        uses: DeLaGuardo/setup-clojure@3.2
        with:
          cli: 1.10.3.822

      - name: install rlwrap
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -y rlwrap

      - name: install rlwrap
        if: matrix.os == 'macos-latest'
        run: brew install rlwrap

        #run: sudo apt-get install -y rlwrap
      - name: cache mvn
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('deps.edn')}}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: run tests on Unix based OS
        run: make test
        if: matrix.os != 'windows-latest'

      # - name: run tests on Windows
      #   run: clojure -M:ui:test:nrepl:kaocha
      #   shell: powershell
      #   if: matrix.os == 'windows-latest'

      - name: Setup Graalvm
        id: setup-graalvm
        uses: DeLaGuardo/setup-graalvm@master
        with:
          # GraalVM version, no pattern syntax available atm
          graalvm: "21.0.0.2"
          java: "java11"
          # Architecture flag, optional, defaults to 'amd64'. Available options are 'amd64' and 'aarch64'. Later is available only for linux runners.
          arch: "amd64"

      - name: Check java binary
        run: java -version

      - name: Install native-image component
        run: ${{ matrix.gu-binary }} install native-image

      - name: build native on Unix like OS
        run: make build-native || cat /tmp/clojure-*.edn
        if: matrix.os != 'windows-latest'
        
      - name: Codesign executable
        env: 
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          IDENTITY_ID: ${{ secrets.IDENTITY_ID }}
        run: |
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p OhziH1Ee sty.keychain 
          security default-keychain -s sty.keychain
          security unlock-keychain -p OhziH1Ee sty.keychain
          security import certificate.p12 -k sty.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k OhziH1Ee sty.keychain
          /usr/bin/codesign --force --options runtime -s $IDENTITY_ID ./sty -v
        if: matrix.os == 'macOS-latest'
        
      - name: "Notarize Release Build"
        uses: devbotsxyz/xcode-notarize@v1
        with:
          product-path: ./sty
          appstore-connect-username: ${{ secrets.NOTARIZATION_USERNAME }}
          appstore-connect-password: ${{ secrets.NOTARIZATION_PASSWORD }}
          primary-bundle-id: sty
        if: matrix.os == 'macOS-latest'
        
      #- name: "Staple Release Build"
      #  uses: devbotsxyz/xcode-staple@v1
      #  with:
      #    product-path: ./sty
      #    verbose: "true"
      #  if: matrix.os == 'macOS-latest'

      - name: build native on Windows
        run: cp VERSION resources/VERSION; clojure -M:native-image;
        if: matrix.os == 'windows-latest'
        shell: powershell

      - name: Compress binary
        run: zip sty-${{ matrix.os }}.zip sty

      - name: Upload result of build
        uses: actions/upload-artifact@v2
        with:
          name: sty-${{ matrix.os }}
          path: sty-${{ matrix.os }}.zip


  publish:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download sty  mac os
        uses: actions/download-artifact@v2
        with:
          name: sty-macOS-latest
      - name: Download sty ubuntu
        uses: actions/download-artifact@v2
        with:
          name: sty-ubuntu-latest

      - name: Delete
        uses: ame-yu/action-delete-latest-release@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: 0.0.1-RC
          tag_name: 0.0.1-RC1

      - name: Fetch latest release
        id: fetch-latest-release
        uses: thebritican/fetch-latest-release@v2.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset macOS
        id: upload-release-asset-mac
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.fetch-latest-release.outputs.upload_url }}
          asset_path: ./sty-macOS-latest.zip
          asset_name: sty-macOS-latest.zip
          asset_content_type: application/zip
      - name: Upload Release Asset ubuntu
        id: upload-release-asset-ubuntu
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.fetch-latest-release.outputs.upload_url }}
          asset_path: ./sty-ubuntu-latest.zip
          asset_name: sty-ubuntu-latest.zip
          asset_content_type: application/zip
