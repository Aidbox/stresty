{ns sty

 suite
 {:zen/tags #{zen/schema zen/tag}
  :type zen/map
  :keys {:base-url {:type zen/string}
         :basic-auth {:type zen/map
                      :keys {:user {:type zen/string}
                             :password {:type zen/string}}}}}

 step
 {:zen/tags #{zen/schema}
  :type zen/map
  :require #{:method :uri}
  :keys {:desc   {:type zen/string}
         :method {:type zen/keyword :enum [{:value :post}
                                           {:value :put}
                                           {:value :get}
                                           {:value :delete}
                                           {:value :patch}]}
         :uri {:type zen/string}
         :body {:type zen/any}
         :response {:type zen/map
                    :values {:type zen/any}}}}
 case
 {:zen/tags #{zen/schema zen/tag}
  :type zen/map
  :keys {:title {:type zen/string}
         :steps {:type zen/map
                 :values {:confirms #{step}}}}}

 predicate {:zen/tags #{zen/tag}}

 string? {:zen/tags #{predicate}}

 number? {:zen/tags #{predicate}}

 integer? {:zen/tags #{predicate}}

 ok? {:zen/tags #{predicate}}

 any? {:zen/tags #{predicate}}

 is-event {:zen/tags #{zen/tag}}

 event
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:type {:type zen/symbol
                :tags #{is-event}
                :zen/desc "Event type, i.e. sty/on-tests-start"}
         :ts {:type zen/integer :zen/desc "Number of milliseconds from start"}}}

 on-tests-start
 {:zen/tags #{is-event zen/schema}
  :zen/desc "Event emited on tests starts"
  :confirms #{event}
  :type zen/map
  :keys {}}

 on-tests-end
 {:zen/tags #{is-event zen/schema}
  :zen/desc "Event emited on tests end"
  :confirms #{event}
  :type zen/map
  :keys {}}

 on-case-start
 {:zen/tags #{is-event zen/schema}
  :zen/desc "Event emited on tests finish"
  :confirms #{event}
  :type zen/map
  :keys {:suite {:confirms #{suite}}
         :case {:confirms #{case}}}}

 on-case-end
 {:zen/tags #{is-event zen/schema}
  :zen/desc "Event emited on tests finish"
  :confirms #{event on-step-start}
  :type zen/map
  :keys {:result {:type zen/any}
         :errors {:type zen/any}}}

 on-step-start
 {:zen/tags #{is-event zen/schema}
  :zen/desc "Event emited on tests finish"
  :confirms #{event}
  :type zen/map
  :keys {:suite {:confirms #{suite}}
         :case {:confirms #{case}}
         :step {:confirms #{step}}}}

 on-step-end
 {:zen/tags #{is-event zen/schema}
  :zen/desc "Event emited on tests finish"
  :confirms #{event on-step-start}
  :type zen/map
  :keys {:result {:type zen/any}
         :errors {:type zen/any}}}


 }
