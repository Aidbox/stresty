{ns stresty

 ;; boring

 uri {:zen/tags #{zen/schema}
      :type zen/string
      :regex "^/.*"}

 predicate {:zen/tags #{zen/tag}
            :zen/desc "Register predicate function"}
 boolean?  {:zen/tags #{predicate}}
 distinct? {:zen/tags #{predicate}}
 double?   {:zen/tags #{predicate}}
 empty?    {:zen/tags #{predicate}}
 even?     {:zen/tags #{predicate}}
 string?   {:zen/tags #{predicate}}


 case {:zen/tags #{zen/schema zen/tag}
       :zen/desc "Schema for case"
       :type zen/map
       :keys {:desc {:type zen/string}
              :steps {:type zen/vector
                      :every {:confirms #{step}}}}}

 ;; TBD
 matcho {:zen/tags #{zen/schema}
         :type zen/case
         :case [{:when {:type zen/map :values {:type zen/any}}
                 :then {:type zen/map
                        :key {:type zen/keyword}
                        :values {:confirms #{matcho}}}}
                {:when {:type zen/vector}
                 :then {:type zen/vector
                        :every {:confirms #{matcho}}}}
                {:when {:type zen/symbol}
                 :then {:type zen/symbol :tags #{predicate}}}
                {:when {:type zen/any}}]}

 response
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:status {:type zen/case
                  :case [{:when {:type zen/integer}}
                         {:when {:type zen/symbol :tags #{predicate}}}]}
         :headers {:type zen/map
                   :key {:type zen/string}
                   :values {:confirms #{matcho}}}
         :body {:confirms #{matcho}}}}


 ;; FIXME: think about middleware mechanism instead of auth-method
 auth-method
 {:zen/tags #{zen/schema zen/tag}
  :type zen/map
  :require #{:type}
  :schema-key {:key :type}
  :keys {:type {:type zen/symbol}}}

 basic-auth
 {:zen/tags #{auth-method}
  :type zen/map
  :keys {:client-id {:type zen/string}
         :client-secret {:type zen/string}}}

 step
 {:zen/tags #{zen/schema zen/tag}
  :type zen/map
  :require #{:type} ;; FIXME: make stresty/http-step default schema
  :schema-key {:key :type}
  :keys {:type {:type zen/symbol}
         :id {:type zen/keyword}
         :desc {:type zen/string}}}

 http-step
 {:zen/tags #{zen/schema step}
  :type zen/map
  :require #{#{:GET :POST :PUT :PATCH :DELETE :OPTION}}
  :exclusive-keys #{#{:GET :POST :PUT :PATCH :DELETE :OPTION} #{:GET :body} #{:HEAD :body} #{:OPTIONS :body}}
  :keys {:type {:type zen/symbol}
         :GET {:confirms #{uri}}
         :POST {:confirms #{uri}}
         :PUT {:confirms #{uri}}
         :PATCH {:confirms #{uri}}
         :DELETE {:confirms #{uri}}
         :OPTION {:confirms #{uri}}
         :agent {:type zen/keyword}
         :headers {:type zen/map
                   :key {:type zen/string}
                   :values {:type zen/string}}
         :body {:type zen/any}
         :match {:confirms #{response}}}}


 }
